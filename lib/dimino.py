#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Algorithm to compute group elements from group generators. 
Input as permutations lists in numpy array format.
"""

import numpy as np
from numba import njit


@njit
def Is_vec_in_mat(vec, mat):
    assume = True
    for elem in mat:
        if np.array_equal(vec, elem):
            assume = False
            break
    return assume


@njit
def dimino_wolfe(group_generators):
    gens = group_generators
    degree = np.max(gens) + 1
    idn = np.arange(degree)
    order = 0
    element_list = [idn]
    # element_list=np.atleast_2d(idn)
    # set_element_list = {tuple(idn)}
    for i in np.arange(len(gens)):
        # D elements of the subgroup G_i generated by gens[:i]
        D = element_list[:]
        N = [idn]
        while N:
            A = N
            N = []
            for a in A:
                for g in gens[:i + 1]:
                    ag = a[g]
                    if Is_vec_in_mat(ag, element_list):
                        # if not np.any(np.all(ag==np.array(element_list,np.int64),axis=1)):
                        # if ag not in np.array(element_list):
                        # if tuple(ag) not in set_element_list:
                        # produce G_i*g
                        for d in D:
                            order += 1
                            ap = d[ag]
                            element_list.append(ap)
                            # element_list=np.append(element_list, np.atleast_2d(ap), axis=0)
                            # set_element_list.add(tuple(ap))
                            N.append(ap)
    return element_list
